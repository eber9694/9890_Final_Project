#full data set
s = read.csv("~/Documents/STA9890/sports_objectivity.csv")

#numner of observations
dim(s)[1]
#number of variables
dim(s)[2]

#getting rid columns 1-3
library(dplyr)
sports = s %>% select(4:62)

#getting rid of sentance1st, sentencelast, WRB, NNP
sports = select(sports, -c(16, 39, 57, 58))

#standardizing the predictors
sport.std = sports %>% select(1:54) %>% mutate_all(.funs = function(x){x / sqrt(mean((x - mean(x))^2))})
sport.std = cbind(sport.std, sports$txtcomplexity)

#turn dataframe into matrix
sport.mat = as.matrix(sport.std)

library(randomForest)
library(glmnet)
n = dim(sport.mat)[1]
p = dim(sport.mat)[2]-0

#splitting in test and train
n.train = floor(0.8*n)
n.test = n-n.train

X = (sport.mat[,-p])
y = sport.mat[,p]
set.seed(47)
M = 100
Rsq.test.rf = rep(0,M)
Rsq.train.rf = rep(0,M)
Rsq.test.en = rep(0,M)  
Rsq.train.en = rep(0,M)
Rsq.test.rid = rep(0,M)
Rsq.train.rid = rep(0,M)
Rsq.test.las = rep(0,M)
Rsq.train.las = rep(0,M)

for (m in c(1:M)) {
  shuffled_indexes = sample(n)
  train = shuffled_indexes[1:n.train]
  test = shuffled_indexes[(1+n.train):n]
  X.train  = X[train, ]
  y.train = y[train]
  X.test = X[test, ]
  y.test= y[test]
  
  #elastic net 
  cv.fit = cv.glmnet(X.train, y.train, alpha = .5, nfolds = 10)
  fit = glmnet(X.train, y.train, alpha = a, lambda = cv.fit$lambda.min)
  y.train.hat = predict(fit, newx = X.train, type = "response") 
  y.test.hat = predict(fit, newx = X.test, type = "response") 
  Rsq.test.en[m] = 1-mean((y.test - y.test.hat)^2)/mean((y - mean(y))^2)
  Rsq.train.en[m] = 1-mean((y.train - y.train.hat)^2)/mean((y - mean(y))^2)  
  
  #random forest
  rf = randomForest(X.train, y.train, mtry = sqrt(p), importance = TRUE)
  y.test.hat.rf = predict(rf, X.test)
  y.train.hat.rf = predict(rf, X.train)
  Rsq.test.rf[m] = 1-mean((y.test - y.test.hat.rf)^2)/mean((y - mean(y))^2)
  Rsq.train.rf[m] = 1-mean((y.train - y.train.hat.rf)^2)/mean((y - mean(y))^2)  
  
  #ridge regression
  cv.fitr = cv.glmnet(X.train, y.train, alpha = 0, nfolds = 10)
  fitr = glmnet(X.train, y.train, alpha = 0, lambda = cv.fitr$lambda.min)
  y.train.hat.r = predict(fitr, newx = X.train, type = "response")
  y.test.hat.r = predict(fitr, newx = X.test, type = "response")
  Rsq.test.rid[m] = 1-mean((y.test - y.test.hat.r)^2)/mean((y - mean(y))^2)
  Rsq.train.rid[m] = 1-mean((y.train - y.train.hat.r)^2)/mean((y - mean(y))^2)  
  
  #lasso regression
  cv.fit.l = cv.glmnet(X.train, y.train, alpha = 1, nfolds = 10)
  fitl = glmnet(X.train, y.train, alpha = 1, lambda = cv.fit.l$lambda.min)
  y.train.hat.l = predict(fitl, newx = X.train, type = "response")
  y.test.hat.l = predict(fitl, newx = X.test, type = "response")
  Rsq.test.las[m] = 1-mean((y.test - y.test.hat.l)^2)/mean((y - mean(y))^2)
  Rsq.train.las[m] = 1-mean((y.train - y.train.hat.l)^2)/mean((y - mean(y))^2)  
  
  cat(sprintf("m=%3.f| Rsq.test.rf=%.2f,  Rsq.test.en=%.2f, Rsq.test.rid=%.2f,  Rsq.test.las=%.2f | 
              Rsq.train.rf=%.2f,  Rsq.train.en=%.2f, Rsq.train.rid=%.2f,  Rsq.train.las=%.2f|\n", m,  
              Rsq.test.rf[m], Rsq.test.en[m], Rsq.test.rid[m], Rsq.test.las[m],  
              Rsq.train.rf[m], Rsq.train.en[m], Rsq.train.rid[m], Rsq.train.las[m]))
}

#boxplots
tiff("randomforest.tiff", units = "in", width = 5, height = 5, res = 300)
boxplot(Rsq.test.rf, Rsq.train.rf, main = "Random Forest R-squared Test", 
        names = c("Test Data", "Train Data"),
        ylab = "R-squared", col = c("light blue", "orchid"))
dev.off()

tiff("elasticnet.tiff", units = "in", width = 5, height = 5, res = 300)
boxplot(Rsq.test.en, Rsq.train.en, main = "Elastic-Net R-squared Test", 
        names = c("Test Data", "Train Data"),
        ylab = "R-squared", col = c("light blue", "orchid"))
dev.off()

tiff("Ridge.tiff", units = "in", width = 7, height = 7, res = 300)
boxplot(Rsq.test.rid, Rsq.train.rid, main = "Ridge Regression R-squared Test", 
        names = c("Test Data", "Train Data"),
        ylab = "R-squared", col = c("light blue", "orchid"))
dev.off()

tiff("lasso.tiff", units = "in", width = 7, height = 7, res = 300)
boxplot(Rsq.test.las, Rsq.train.las, main = "Lasso Regression R-Squared Test", 
        names = c("Test Data", "Train Data"),
        ylab = "R-squared", col = c("light blue", "orchid"))
dev.off()

#Elastic-net CV plot
cv.fit = cv.glmnet(X.train, y.train, alpha = 0.5)
cv.fit$lambda.min

tiff("cven.tiff", units= "in", width = 5, height = 5, res = 300)
plot(cv.fit)
title("Elastic-net", line = 2)
dev.off()

#Ridge CV plot
cv.fitr = cv.glmnet(X.train, y.train, alpha = 0)
cv.fitr$lambda.min

tiff("ridge.tiff", units= "in", width = 5, height = 5, res = 300)
plot(cv.fitr)
title("Ridge Regression", line = 2)
dev.off()

#Lasso CV Plot
tiff("lasso.tiff", units= "in", width = 5, height = 5, res = 300)
plot(cv.fit.l)
title("Lasso Regression", line = 2)
dev.off()

#residuals- ridge
rid.train.res = as.numeric(y.train - y.train.hat.r)
rid.test.res = as.numeric(y.test - y.test.hat.r)

#boxplot
tiff("ridge_res.tiff", units = "in", width = 5, height = 5, res = 300)
boxplot(rid.test.res, rid.train.res, main = "Ridge Regression", names = c("Test Data", "Train Data"),
        ylab = "Residuals", col = c("light blue", "orchid"))
dev.off()

#residuals- lasso
las.train.res = as.numeric(y.train - y.train.hat.l)
las.test.res = as.numeric(y.test - y.test.hat.l)
tiff("las_res.tiff", units = "in", width = 5, height = 5, res = 300)
boxplot(las.test.res, las.train.res, main = "Lasso Regression", names = c("Test Data", "Train Data"),
        ylab = "Residuals", col = c("light blue", "orchid"))
dev.off()

#residuals- Random Forest 
for.train.res = as.numeric(y.train - y.train.hat.rf)
for.test.res = as.numeric(y.test - y.test.hat.rf)
tiff("rf_res.tiff", units = "in", width = 5, height = 5, res = 300)
boxplot(for.test.res, for.train.res, main = "Random Forest", names = c("Test Data", "Train Data"),
        ylab = "Residuals", col = c("light blue", "orchid"))
dev.off()

#residuals elastic net
en.train.res = as.numeric(y.train - y.train.hat)
en.test.res = as.numeric(y.test - y.test.hat)

tiff("en_res.tiff", units = "in", width = 5, height = 5, res = 300)
boxplot(en.test.res, en.train.res, main = "Elastic Net", names = c("Test Data", "Train Data"),
        ylab = "Residuals", col = c("light blue", "orchid"))
dev.off()

#Bootstrap
bootstrapSamples = 100
beta.rf.bs = matrix(0, nrow = 54, ncol = bootstrapSamples)    
beta.en.bs = matrix(0, nrow = 54, ncol = bootstrapSamples)    

for (m in 1:bootstrapSamples){
  bs_indexes = sample(n, replace=T)
  X.bs = X[bs_indexes, ]
  y.bs = y[bs_indexes]
  
  #fit bs rf
  rf = randomForest(X.bs, y.bs, mtry = sqrt(p), importance = TRUE)
  beta.rf.bs[,m] = as.vector(rf$importance[,1])
  
  #fit bs en
  cv.fit = cv.glmnet(X.bs, y.bs, intercept = FALSE, alpha = 0.05, nfolds = 10)
  fit = glmnet(X.bs, y.bs, intercept = FALSE, alpha = 0.05, lambda = cv.fit$lambda.min)  
  beta.en.bs[,m] = as.vector(fit$beta)
  
  cat(sprintf("Bootstrap Sample %3.f \n", m))
  
}

#Standard Errors
rf.bs.sd = apply(beta.rf.bs, 1, "sd")
en.bs.sd = apply(beta.en.bs, 1, "sd")
rid.bs.sd = apply(beta.rid.bs, 1, "sd")

# fit rf to the whole data
rf.w =  randomForest(X, y, mtry = sqrt(p), importance = TRUE)

# fit en to the whole data
cv.fit = cv.glmnet(X, y, alpha = 0.5, nfolds = 10)
fit.en =  glmnet(X, y, alpha = 0.5, lambda = cv.fit$lambda.min)

#betS
betaS.rf = data.frame(c(1:54), as.vector(rf$importance[,1]), 2*rf.bs.sd)
colnames(betaS.rf) = c( "Feature", "Value", "Err")

betaS.en = data.frame(c(1:54), as.vector(fit$beta), 2*en.bs.sd)
colnames(betaS.en) = c( "Feature", "Value", "Err")

#Plots
library(ggplot2)
library(gridExtra)

tiff("bootstrap.tiff", units = "in", width = 5, height = 5, res = 300)
rfPlot =  ggplot(betaS.rf, aes(x=Feature, y=Value)) +
  geom_bar(stat = "identity", fill="white", colour="black") +
  geom_errorbar(aes(ymin=Value-Err, ymax=Value+Err), width=.2) +
  ggtitle("Random Forest") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x=element_text(angle = 90, vjust = 0.5, size = 5))
enPlot =  ggplot(betaS.en, aes(x=Feature, y=Value)) +
  geom_bar(stat = "identity", fill="white", colour="black") +
  geom_errorbar(aes(ymin=Value-Err, ymax=Value+Err), width=.2) +
  ggtitle("Elastic-Net") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x=element_text(angle = 90, vjust = 0.5, size = 5))
grid.arrange(rfPlot, enPlot, nrow = 2)
dev.off()

#Changing order of barplots
betaS.rf$Feature = factor(betaS.rf$Feature, levels = betaS.rf$Feature
                          [order(betaS.rf$Value, decreasing = TRUE)])
betaS.en$Feature = factor(betaS.en$Feature, levels = betaS.en$Feature
                          [order(betaS.en$Value, decreasing = TRUE)])


